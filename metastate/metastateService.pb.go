// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: metastateService.proto

package metastate

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// initiate the election process by exchanging the ID and other information;
// every eligbible candidate will send out this request at a random interval within 2 seconds;
// hence theoretically there MUST be at least 1 pair of brokers doing the election eventually
type ElectionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerName string `protobuf:"bytes,1,opt,name=brokerName,proto3" json:"brokerName,omitempty"`
	// basically requires ID to compare who is min; the min ID bared broker would be the elected PRIMARY
	BrokerID   string `protobuf:"bytes,2,opt,name=brokerID,proto3" json:"brokerID,omitempty"`
	BrokerAddr string `protobuf:"bytes,3,opt,name=brokerAddr,proto3" json:"brokerAddr,omitempty"`
}

func (x *ElectionRequest) Reset() {
	*x = ElectionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastateService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionRequest) ProtoMessage() {}

func (x *ElectionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metastateService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionRequest.ProtoReflect.Descriptor instead.
func (*ElectionRequest) Descriptor() ([]byte, []int) {
	return file_metastateService_proto_rawDescGZIP(), []int{0}
}

func (x *ElectionRequest) GetBrokerName() string {
	if x != nil {
		return x.BrokerName
	}
	return ""
}

func (x *ElectionRequest) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *ElectionRequest) GetBrokerAddr() string {
	if x != nil {
		return x.BrokerAddr
	}
	return ""
}

// for eligible BUT not the winner (elected primary) broker(s); need to get the ACK from the elected primary;
// by then the election really ends
type ElectionDoneHandshakeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// primary - means the won / primary broker; needs ACK from the primary to END election
	PrimaryBrokerName string `protobuf:"bytes,1,opt,name=primaryBrokerName,proto3" json:"primaryBrokerName,omitempty"`
	PrimaryBrokerID   string `protobuf:"bytes,2,opt,name=primaryBrokerID,proto3" json:"primaryBrokerID,omitempty"`
	PrimaryBrokerAddr string `protobuf:"bytes,3,opt,name=primaryBrokerAddr,proto3" json:"primaryBrokerAddr,omitempty"`
	// src - means the current instance (which is not the winner)
	SrcBrokerName string `protobuf:"bytes,10,opt,name=srcBrokerName,proto3" json:"srcBrokerName,omitempty"`
	SrcBrokerID   string `protobuf:"bytes,11,opt,name=srcBrokerID,proto3" json:"srcBrokerID,omitempty"`
	SrcBrokerAddr string `protobuf:"bytes,12,opt,name=srcBrokerAddr,proto3" json:"srcBrokerAddr,omitempty"`
}

func (x *ElectionDoneHandshakeRequest) Reset() {
	*x = ElectionDoneHandshakeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastateService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionDoneHandshakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionDoneHandshakeRequest) ProtoMessage() {}

func (x *ElectionDoneHandshakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metastateService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionDoneHandshakeRequest.ProtoReflect.Descriptor instead.
func (*ElectionDoneHandshakeRequest) Descriptor() ([]byte, []int) {
	return file_metastateService_proto_rawDescGZIP(), []int{1}
}

func (x *ElectionDoneHandshakeRequest) GetPrimaryBrokerName() string {
	if x != nil {
		return x.PrimaryBrokerName
	}
	return ""
}

func (x *ElectionDoneHandshakeRequest) GetPrimaryBrokerID() string {
	if x != nil {
		return x.PrimaryBrokerID
	}
	return ""
}

func (x *ElectionDoneHandshakeRequest) GetPrimaryBrokerAddr() string {
	if x != nil {
		return x.PrimaryBrokerAddr
	}
	return ""
}

func (x *ElectionDoneHandshakeRequest) GetSrcBrokerName() string {
	if x != nil {
		return x.SrcBrokerName
	}
	return ""
}

func (x *ElectionDoneHandshakeRequest) GetSrcBrokerID() string {
	if x != nil {
		return x.SrcBrokerID
	}
	return ""
}

func (x *ElectionDoneHandshakeRequest) GetSrcBrokerAddr() string {
	if x != nil {
		return x.SrcBrokerAddr
	}
	return ""
}

// response from the elected primary on confirming (ACK); election is DONE at this stage
type ElectionDoneHandshakeACKResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status code: 200 - OK, 5XX - ERROR (e.g. 500 - internal error; 501 - meta state stale error etc)
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ElectionDoneHandshakeACKResponse) Reset() {
	*x = ElectionDoneHandshakeACKResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastateService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElectionDoneHandshakeACKResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElectionDoneHandshakeACKResponse) ProtoMessage() {}

func (x *ElectionDoneHandshakeACKResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metastateService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElectionDoneHandshakeACKResponse.ProtoReflect.Descriptor instead.
func (*ElectionDoneHandshakeACKResponse) Descriptor() ([]byte, []int) {
	return file_metastateService_proto_rawDescGZIP(), []int{2}
}

func (x *ElectionDoneHandshakeACKResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Dummy can act as either an empty request or response (can replace this later on for real implementation if necessary...)
// since there is NOTHING inside dummy, hence min overhead
type Dummy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Dummy) Reset() {
	*x = Dummy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastateService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dummy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dummy) ProtoMessage() {}

func (x *Dummy) ProtoReflect() protoreflect.Message {
	mi := &file_metastateService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dummy.ProtoReflect.Descriptor instead.
func (*Dummy) Descriptor() ([]byte, []int) {
	return file_metastateService_proto_rawDescGZIP(), []int{3}
}

// for non election eligible broker(s); asking the potential primary(s) on whether it could join the cluster.
// also sniff back the elected primary's info
type ClusterJoinRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrokerName string `protobuf:"bytes,1,opt,name=brokerName,proto3" json:"brokerName,omitempty"`
	BrokerID   string `protobuf:"bytes,2,opt,name=brokerID,proto3" json:"brokerID,omitempty"`
	BrokerAddr string `protobuf:"bytes,3,opt,name=brokerAddr,proto3" json:"brokerAddr,omitempty"`
}

func (x *ClusterJoinRequest) Reset() {
	*x = ClusterJoinRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastateService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterJoinRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterJoinRequest) ProtoMessage() {}

func (x *ClusterJoinRequest) ProtoReflect() protoreflect.Message {
	mi := &file_metastateService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterJoinRequest.ProtoReflect.Descriptor instead.
func (*ClusterJoinRequest) Descriptor() ([]byte, []int) {
	return file_metastateService_proto_rawDescGZIP(), []int{4}
}

func (x *ClusterJoinRequest) GetBrokerName() string {
	if x != nil {
		return x.BrokerName
	}
	return ""
}

func (x *ClusterJoinRequest) GetBrokerID() string {
	if x != nil {
		return x.BrokerID
	}
	return ""
}

func (x *ClusterJoinRequest) GetBrokerAddr() string {
	if x != nil {
		return x.BrokerAddr
	}
	return ""
}

// for non election eligible broker(s); got back the response / ACK.
// MUST check the status and see if any further ping(s) are required; check the inline DOC
type ClusterJoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// status of the response:
	// 200 - OK + elected primary available (election done)
	// 300 - in progress, election not yet done; re-ping again after an interval
	//    (e.g.) 5 ~ 10 seconds (can't continue till end of world; until election finally DONE)
	// 5XX - some other error happened (each status has a reason stating why)
	Status            int32  `protobuf:"varint,10,opt,name=status,proto3" json:"status,omitempty"`
	PrimaryBrokerName string `protobuf:"bytes,1,opt,name=primaryBrokerName,proto3" json:"primaryBrokerName,omitempty"`
	PrimaryBrokerID   string `protobuf:"bytes,2,opt,name=primaryBrokerID,proto3" json:"primaryBrokerID,omitempty"`
	PrimaryBrokerAddr string `protobuf:"bytes,3,opt,name=primaryBrokerAddr,proto3" json:"primaryBrokerAddr,omitempty"`
}

func (x *ClusterJoinResponse) Reset() {
	*x = ClusterJoinResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_metastateService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterJoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterJoinResponse) ProtoMessage() {}

func (x *ClusterJoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_metastateService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterJoinResponse.ProtoReflect.Descriptor instead.
func (*ClusterJoinResponse) Descriptor() ([]byte, []int) {
	return file_metastateService_proto_rawDescGZIP(), []int{5}
}

func (x *ClusterJoinResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ClusterJoinResponse) GetPrimaryBrokerName() string {
	if x != nil {
		return x.PrimaryBrokerName
	}
	return ""
}

func (x *ClusterJoinResponse) GetPrimaryBrokerID() string {
	if x != nil {
		return x.PrimaryBrokerID
	}
	return ""
}

func (x *ClusterJoinResponse) GetPrimaryBrokerAddr() string {
	if x != nil {
		return x.PrimaryBrokerAddr
	}
	return ""
}

var File_metastateService_proto protoreflect.FileDescriptor

var file_metastateService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x22, 0x92, 0x02, 0x0a, 0x1c, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x6f, 0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x72, 0x63,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x72, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x72, 0x63, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0x36, 0x0a, 0x20, 0x45, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65,
	0x41, 0x43, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0x07, 0x0a, 0x05, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x22, 0x70, 0x0a, 0x12, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x22, 0xb3, 0x01, 0x0a, 0x13, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72,
	0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72,
	0x6f, 0x6b, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x32, 0x9f, 0x02, 0x0a, 0x10, 0x4d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x47, 0x0a, 0x17, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74,
	0x65, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d,
	0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x75, 0x6d, 0x6d, 0x79, 0x12, 0x6c,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x50, 0x72, 0x69, 0x6d,
	0x61, 0x72, 0x79, 0x41, 0x43, 0x4b, 0x12, 0x27, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x48,
	0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x68, 0x61, 0x6b,
	0x65, 0x41, 0x43, 0x4b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x13,
	0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x6d, 0x65, 0x74, 0x61, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_metastateService_proto_rawDescOnce sync.Once
	file_metastateService_proto_rawDescData = file_metastateService_proto_rawDesc
)

func file_metastateService_proto_rawDescGZIP() []byte {
	file_metastateService_proto_rawDescOnce.Do(func() {
		file_metastateService_proto_rawDescData = protoimpl.X.CompressGZIP(file_metastateService_proto_rawDescData)
	})
	return file_metastateService_proto_rawDescData
}

var file_metastateService_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_metastateService_proto_goTypes = []interface{}{
	(*ElectionRequest)(nil),                  // 0: metastate.ElectionRequest
	(*ElectionDoneHandshakeRequest)(nil),     // 1: metastate.ElectionDoneHandshakeRequest
	(*ElectionDoneHandshakeACKResponse)(nil), // 2: metastate.ElectionDoneHandshakeACKResponse
	(*Dummy)(nil),                            // 3: metastate.Dummy
	(*ClusterJoinRequest)(nil),               // 4: metastate.ClusterJoinRequest
	(*ClusterJoinResponse)(nil),              // 5: metastate.ClusterJoinResponse
}
var file_metastateService_proto_depIdxs = []int32{
	0, // 0: metastate.MetastateService.InitiateElectionRequest:input_type -> metastate.ElectionRequest
	1, // 1: metastate.MetastateService.GetElectedPrimaryACK:input_type -> metastate.ElectionDoneHandshakeRequest
	4, // 2: metastate.MetastateService.InitiateClusterJoin:input_type -> metastate.ClusterJoinRequest
	3, // 3: metastate.MetastateService.InitiateElectionRequest:output_type -> metastate.Dummy
	2, // 4: metastate.MetastateService.GetElectedPrimaryACK:output_type -> metastate.ElectionDoneHandshakeACKResponse
	5, // 5: metastate.MetastateService.InitiateClusterJoin:output_type -> metastate.ClusterJoinResponse
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_metastateService_proto_init() }
func file_metastateService_proto_init() {
	if File_metastateService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_metastateService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastateService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionDoneHandshakeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastateService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElectionDoneHandshakeACKResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastateService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dummy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastateService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterJoinRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_metastateService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterJoinResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_metastateService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_metastateService_proto_goTypes,
		DependencyIndexes: file_metastateService_proto_depIdxs,
		MessageInfos:      file_metastateService_proto_msgTypes,
	}.Build()
	File_metastateService_proto = out.File
	file_metastateService_proto_rawDesc = nil
	file_metastateService_proto_goTypes = nil
	file_metastateService_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MetastateServiceClient is the client API for MetastateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MetastateServiceClient interface {
	// ping other eligible broker(s) for info to start election
	InitiateElectionRequest(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*Dummy, error)
	// for non winners, ping back the elected primary for ACK
	GetElectedPrimaryACK(ctx context.Context, in *ElectionDoneHandshakeRequest, opts ...grpc.CallOption) (*ElectionDoneHandshakeACKResponse, error)
	// for non eligibe broker(s); initiate this request to join the Cluster
	// MUST check the status returned to decide whether to resend join request again
	InitiateClusterJoin(ctx context.Context, in *ClusterJoinRequest, opts ...grpc.CallOption) (*ClusterJoinResponse, error)
}

type metastateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetastateServiceClient(cc grpc.ClientConnInterface) MetastateServiceClient {
	return &metastateServiceClient{cc}
}

func (c *metastateServiceClient) InitiateElectionRequest(ctx context.Context, in *ElectionRequest, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, "/metastate.MetastateService/InitiateElectionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metastateServiceClient) GetElectedPrimaryACK(ctx context.Context, in *ElectionDoneHandshakeRequest, opts ...grpc.CallOption) (*ElectionDoneHandshakeACKResponse, error) {
	out := new(ElectionDoneHandshakeACKResponse)
	err := c.cc.Invoke(ctx, "/metastate.MetastateService/GetElectedPrimaryACK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metastateServiceClient) InitiateClusterJoin(ctx context.Context, in *ClusterJoinRequest, opts ...grpc.CallOption) (*ClusterJoinResponse, error) {
	out := new(ClusterJoinResponse)
	err := c.cc.Invoke(ctx, "/metastate.MetastateService/InitiateClusterJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetastateServiceServer is the server API for MetastateService service.
type MetastateServiceServer interface {
	// ping other eligible broker(s) for info to start election
	InitiateElectionRequest(context.Context, *ElectionRequest) (*Dummy, error)
	// for non winners, ping back the elected primary for ACK
	GetElectedPrimaryACK(context.Context, *ElectionDoneHandshakeRequest) (*ElectionDoneHandshakeACKResponse, error)
	// for non eligibe broker(s); initiate this request to join the Cluster
	// MUST check the status returned to decide whether to resend join request again
	InitiateClusterJoin(context.Context, *ClusterJoinRequest) (*ClusterJoinResponse, error)
}

// UnimplementedMetastateServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMetastateServiceServer struct {
}

func (*UnimplementedMetastateServiceServer) InitiateElectionRequest(context.Context, *ElectionRequest) (*Dummy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateElectionRequest not implemented")
}
func (*UnimplementedMetastateServiceServer) GetElectedPrimaryACK(context.Context, *ElectionDoneHandshakeRequest) (*ElectionDoneHandshakeACKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetElectedPrimaryACK not implemented")
}
func (*UnimplementedMetastateServiceServer) InitiateClusterJoin(context.Context, *ClusterJoinRequest) (*ClusterJoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateClusterJoin not implemented")
}

func RegisterMetastateServiceServer(s *grpc.Server, srv MetastateServiceServer) {
	s.RegisterService(&_MetastateService_serviceDesc, srv)
}

func _MetastateService_InitiateElectionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetastateServiceServer).InitiateElectionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metastate.MetastateService/InitiateElectionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetastateServiceServer).InitiateElectionRequest(ctx, req.(*ElectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetastateService_GetElectedPrimaryACK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectionDoneHandshakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetastateServiceServer).GetElectedPrimaryACK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metastate.MetastateService/GetElectedPrimaryACK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetastateServiceServer).GetElectedPrimaryACK(ctx, req.(*ElectionDoneHandshakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetastateService_InitiateClusterJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterJoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetastateServiceServer).InitiateClusterJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metastate.MetastateService/InitiateClusterJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetastateServiceServer).InitiateClusterJoin(ctx, req.(*ClusterJoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MetastateService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metastate.MetastateService",
	HandlerType: (*MetastateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateElectionRequest",
			Handler:    _MetastateService_InitiateElectionRequest_Handler,
		},
		{
			MethodName: "GetElectedPrimaryACK",
			Handler:    _MetastateService_GetElectedPrimaryACK_Handler,
		},
		{
			MethodName: "InitiateClusterJoin",
			Handler:    _MetastateService_InitiateClusterJoin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metastateService.proto",
}
